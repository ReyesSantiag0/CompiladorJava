package Lex_Sin_Sem;

import instructivo.Visual;
import instructivo.Visual_Ejemplos;
import java.awt.Color;
import java.io.BufferedReader;
import java.io.File;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.IOException;
import java.io.StreamTokenizer;
import java.util.HashMap;
import java.util.Iterator;
import java.util.LinkedList;
import java.util.StringTokenizer;
import javax.swing.Icon;
import javax.swing.ImageIcon;
import javax.swing.JFileChooser;
import javax.swing.JFrame;
import javax.swing.JLabel;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.JScrollPane;
import javax.swing.filechooser.FileNameExtensionFilter;
import javax.swing.table.DefaultTableModel;

public class Ventana extends javax.swing.JFrame {

    FileNameExtensionFilter filtro = new FileNameExtensionFilter("Archivos Word y txt", "docx", "txt");
    File f;
    JFileChooser j = new JFileChooser();
    String data1[][] = {};
    String cabecera1[] = {"No.", " Token ", " Tipo"};
    String path;
    int cont = 0;
    int errores;
    String mensajini = "";
    String tipo = "";
    EnumerarLineas Enum;

    public Ventana() {
        initComponents();
        Enum = new EnumerarLineas(txtcod);
        jScrollPane4.setRowHeaderView(Enum);
        setResizable(false);
        setLocationRelativeTo(null);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jMenuItem7 = new javax.swing.JMenuItem();
        panel1 = new javax.swing.JPanel();
        jScrollPane5 = new javax.swing.JScrollPane();
        Error = new javax.swing.JEditorPane();
        jScrollPane2 = new javax.swing.JScrollPane();
        jPanel1 = new javax.swing.JPanel();
        LineaError = new javax.swing.JEditorPane();
        jScrollPane4 = new javax.swing.JScrollPane();
        txtcod = new javax.swing.JTextArea();
        jScrollPane1 = new javax.swing.JScrollPane();
        txtATraducido = new javax.swing.JTextArea();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jScrollPane3 = new javax.swing.JScrollPane();
        tabla = new javax.swing.JTable();
        jMenuBar1 = new javax.swing.JMenuBar();
        jMenu1 = new javax.swing.JMenu();
        jMenu2 = new javax.swing.JMenu();
        jMenuItem1 = new javax.swing.JMenuItem();
        MostrarTipoCar = new javax.swing.JMenuItem();
        jSeparator1 = new javax.swing.JPopupMenu.Separator();
        jMenu3 = new javax.swing.JMenu();
        guardar = new javax.swing.JMenuItem();
        limpiar = new javax.swing.JMenu();
        lim = new javax.swing.JMenuItem();
        compilar = new javax.swing.JMenu();
        Compi = new javax.swing.JMenuItem();
        Ejec = new javax.swing.JMenu();
        Ejecuta = new javax.swing.JMenuItem();
        jMenu6 = new javax.swing.JMenu();
        instructivo = new javax.swing.JMenuItem();
        jSeparator7 = new javax.swing.JPopupMenu.Separator();
        Ejemplo = new javax.swing.JMenuItem();
        jSeparator3 = new javax.swing.JPopupMenu.Separator();
        acerca = new javax.swing.JMenuItem();

        jMenuItem7.setText("jMenuItem7");

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        panel1.setBackground(new java.awt.Color(51, 51, 51));
        panel1.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        Error.setEditable(false);
        Error.setBorder(javax.swing.BorderFactory.createEtchedBorder(javax.swing.border.EtchedBorder.RAISED));
        Error.setFont(new java.awt.Font("Arial", 1, 12)); // NOI18N
        Error.setForeground(java.awt.Color.blue);
        jScrollPane5.setViewportView(Error);

        panel1.add(jScrollPane5, new org.netbeans.lib.awtextra.AbsoluteConstraints(480, 498, 620, 130));

        LineaError.setEditable(false);
        LineaError.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        LineaError.setForeground(java.awt.Color.red);
        LineaError.setToolTipText("");
        LineaError.setOpaque(false);

        txtcod.setColumns(20);
        txtcod.setRows(5);
        jScrollPane4.setViewportView(txtcod);

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addComponent(LineaError, javax.swing.GroupLayout.PREFERRED_SIZE, 11, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, 457, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(43, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                        .addComponent(jScrollPane4, javax.swing.GroupLayout.DEFAULT_SIZE, 616, Short.MAX_VALUE)
                        .addContainerGap())
                    .addComponent(LineaError, javax.swing.GroupLayout.Alignment.TRAILING)))
        );

        jScrollPane2.setViewportView(jPanel1);

        panel1.add(jScrollPane2, new org.netbeans.lib.awtextra.AbsoluteConstraints(2, 1, 480, 640));

        txtATraducido.setColumns(20);
        txtATraducido.setRows(5);
        jScrollPane1.setViewportView(txtATraducido);

        panel1.add(jScrollPane1, new org.netbeans.lib.awtextra.AbsoluteConstraints(810, 40, 270, 390));

        jLabel4.setFont(new java.awt.Font("Arial", 1, 18)); // NOI18N
        jLabel4.setForeground(new java.awt.Color(255, 255, 255));
        jLabel4.setText("Resultado de la ejecuci√≥n");
        jLabel4.setBorder(javax.swing.BorderFactory.createEmptyBorder(1, 1, 1, 1));
        panel1.add(jLabel4, new org.netbeans.lib.awtextra.AbsoluteConstraints(820, 10, -1, -1));

        jLabel5.setFont(new java.awt.Font("Arial", 1, 24)); // NOI18N
        jLabel5.setForeground(new java.awt.Color(255, 255, 255));
        jLabel5.setText("Resultado de la compilacion");
        jLabel5.setBorder(javax.swing.BorderFactory.createEmptyBorder(1, 1, 1, 1));
        panel1.add(jLabel5, new org.netbeans.lib.awtextra.AbsoluteConstraints(660, 450, -1, -1));

        jLabel3.setFont(new java.awt.Font("Arial", 1, 18)); // NOI18N
        jLabel3.setForeground(new java.awt.Color(255, 255, 255));
        jLabel3.setText("Tabla de Simbolos");
        jLabel3.setBorder(javax.swing.BorderFactory.createEmptyBorder(1, 1, 1, 1));
        panel1.add(jLabel3, new org.netbeans.lib.awtextra.AbsoluteConstraints(580, 10, -1, -1));

        tabla.setFont(new java.awt.Font("Century Gothic", 1, 14)); // NOI18N
        tabla.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {},
                {},
                {},
                {},
                {},
                {},
                {},
                {},
                {},
                {},
                {},
                {},
                {},
                {},
                {},
                {},
                {},
                {},
                {},
                {},
                {},
                {},
                {},
                {},
                {},
                {},
                {},
                {},
                {},
                {},
                {},
                {},
                {},
                {},
                {},
                {},
                {},
                {},
                {},
                {},
                {},
                {},
                {},
                {},
                {},
                {},
                {},
                {},
                {},
                {},
                {},
                {},
                {},
                {},
                {},
                {},
                {},
                {},
                {},
                {},
                {},
                {},
                {},
                {},
                {},
                {},
                {},
                {},
                {},
                {},
                {},
                {},
                {},
                {},
                {},
                {},
                {},
                {},
                {},
                {},
                {},
                {},
                {},
                {},
                {},
                {},
                {},
                {},
                {},
                {},
                {},
                {},
                {},
                {},
                {},
                {},
                {}
            },
            new String [] {

            }
        ));
        jScrollPane3.setViewportView(tabla);

        panel1.add(jScrollPane3, new org.netbeans.lib.awtextra.AbsoluteConstraints(510, 40, 289, 390));

        jMenu1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/iconos/About.png"))); // NOI18N
        jMenu1.setText("Opciones");

        jMenu2.setIcon(new javax.swing.ImageIcon(getClass().getResource("/iconos/Save.png"))); // NOI18N
        jMenu2.setText("Cargar");
        jMenu2.setFont(new java.awt.Font("Century Gothic", 1, 12)); // NOI18N

        jMenuItem1.setFont(new java.awt.Font("Century Gothic", 1, 12)); // NOI18N
        jMenuItem1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/iconos/New document.png"))); // NOI18N
        jMenuItem1.setText("Cargar archivo txt");
        jMenuItem1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem1ActionPerformed(evt);
            }
        });
        jMenu2.add(jMenuItem1);

        jMenu1.add(jMenu2);

        MostrarTipoCar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/iconos/Table.png"))); // NOI18N
        MostrarTipoCar.setText("Mostrar el tipo de cadenas generadas");
        MostrarTipoCar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                MostrarTipoCarActionPerformed(evt);
            }
        });
        jMenu1.add(MostrarTipoCar);
        jMenu1.add(jSeparator1);

        jMenuBar1.add(jMenu1);

        jMenu3.setText("Guardar");

        guardar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/iconos/Save.png"))); // NOI18N
        guardar.setText("Guardar");
        guardar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                guardarActionPerformed(evt);
            }
        });
        jMenu3.add(guardar);

        jMenuBar1.add(jMenu3);

        limpiar.setText("Limpiar");
        limpiar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                limpiarActionPerformed(evt);
            }
        });

        lim.setIcon(new javax.swing.ImageIcon(getClass().getResource("/iconos/escoba.png"))); // NOI18N
        lim.setText("Limpiar");
        lim.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                limActionPerformed(evt);
            }
        });
        limpiar.add(lim);

        jMenuBar1.add(limpiar);

        compilar.setText("Compilar");
        compilar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                compilarActionPerformed(evt);
            }
        });

        Compi.setIcon(new javax.swing.ImageIcon(getClass().getResource("/iconos/marti.png"))); // NOI18N
        Compi.setText("Compilar");
        Compi.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                CompiActionPerformed(evt);
            }
        });
        compilar.add(Compi);

        jMenuBar1.add(compilar);

        Ejec.setText("Ejecutar");
        Ejec.setEnabled(false);
        Ejec.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                EjecActionPerformed(evt);
            }
        });

        Ejecuta.setIcon(new javax.swing.ImageIcon(getClass().getResource("/iconos/Yes.png"))); // NOI18N
        Ejecuta.setText("Ejecutar");
        Ejecuta.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                EjecutaActionPerformed(evt);
            }
        });
        Ejec.add(Ejecuta);

        jMenuBar1.add(Ejec);

        jMenu6.setText("Ayuda");

        instructivo.setIcon(new javax.swing.ImageIcon(getClass().getResource("/iconos/Help book.png"))); // NOI18N
        instructivo.setText("Instructivo");
        instructivo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                instructivoActionPerformed(evt);
            }
        });
        jMenu6.add(instructivo);
        jMenu6.add(jSeparator7);

        Ejemplo.setIcon(new javax.swing.ImageIcon(getClass().getResource("/iconos/Component.png"))); // NOI18N
        Ejemplo.setText("Ejemplos");
        Ejemplo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                EjemploActionPerformed(evt);
            }
        });
        jMenu6.add(Ejemplo);
        jMenu6.add(jSeparator3);

        acerca.setIcon(new javax.swing.ImageIcon(getClass().getResource("/iconos/About.png"))); // NOI18N
        acerca.setText("Acerca de");
        acerca.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                acercaActionPerformed(evt);
            }
        });
        jMenu6.add(acerca);

        jMenuBar1.add(jMenu6);

        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(panel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(panel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 10, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jMenuItem1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem1ActionPerformed
        //Se crea un jfilechooser
        j.setCurrentDirectory(new File("src\\lexicosintactico"));
        j.getSelectedFile();
        j.setFileFilter(filtro);//A√±ado el filtro
        j.showOpenDialog(j);

        int contPalabra = 0;//Creo un contador para las palabras
        try {
            //Aqui se manda la ruta del archivo
            path = j.getSelectedFile().getAbsolutePath();//Obtiene la Ruta
            String name = j.getSelectedFile().getName();//Obtiene el nombre
            String lectura = "";
            f = new File(path);

            try {

                FileReader fr = new FileReader(f);
                BufferedReader br = new BufferedReader(fr);
                String aux;
                //Aqui cuento cuantas palabras hay
                StreamTokenizer st = new StreamTokenizer(new FileReader(f));
                while (st.nextToken() != StreamTokenizer.TT_EOF) {
                    if (st.ttype == StreamTokenizer.TT_WORD) {
                        contPalabra++;

                    }
                }

                //Aqui empieza a leer el archivo linea por linea hasta que en el texto ya no haya nada
                while ((aux = br.readLine()) != null) {
                    lectura = lectura + aux + "\n";//Voy acumulando todo en un string
                }
            } catch (IOException e) {
            }

            txtcod.setText(lectura);//Mando lo que resulto de la lectura
            int contador = 0;
            StringTokenizer st = new StringTokenizer(txtcod.getText(), "\n", true);
            String Text = "", token;
            contador = 1;

            while (st.hasMoreTokens()) {
                token = st.nextToken();
                if ("\n".equals(token)) {
                    contador++;
                }
            }

            for (int i = 1; i <= contador; i++) {
                Text += i + "\n";
            }
        } catch (NullPointerException e) {

            javax.swing.JOptionPane.showMessageDialog(j, "Has seleccionado cerrar programa, saliendo...");

        }
    }//GEN-LAST:event_jMenuItem1ActionPerformed

    private void MostrarTipoCarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_MostrarTipoCarActionPerformed

        //Tokens
        HashMap<String, Integer> reservadas = new HashMap<>();
        HashMap<String, Integer> operadores = new HashMap<>();
        HashMap<String, Integer> id = new HashMap<>();
        HashMap<String, Integer> delimitadores = new HashMap<>();
        HashMap<String, Integer> digitos = new HashMap<>();
        LinkedList<String> alfabeto = new LinkedList<>();

        reservadas.put("comienzo", 0);
        reservadas.put("fin", 0);
        reservadas.put("cadena", 0);
        reservadas.put("entero", 0);
        reservadas.put("decimal", 0);
        reservadas.put("booleano", 0);
        reservadas.put("leer", 0);
        reservadas.put("mostrar", 0);
        reservadas.put("mientras", 0);
        reservadas.put("si", 0);
        reservadas.put("para", 0);
        reservadas.put("con_paso", 0);
        reservadas.put("hasta", 0);
        reservadas.put("finfor", 0);
        reservadas.put("finmientras", 0);
        reservadas.put("finsi", 0);

        operadores.put("/", 0);
        operadores.put("*", 0);
        operadores.put("+", 0);
        operadores.put("-", 0);
        operadores.put("=", 0);
        operadores.put("^", 0);
        operadores.put("<", 0);
        operadores.put(">", 0);
        operadores.put("||", 0);
        operadores.put("&&", 0);

        delimitadores.put("#", 0);
        delimitadores.put(";", 0);
        delimitadores.put("{", 0);
        delimitadores.put("}", 0);
        delimitadores.put(")", 0);
        delimitadores.put(",", 0);
        delimitadores.put("(", 0);

        DefaultTableModel model = new DefaultTableModel();
        model.setColumnIdentifiers(new Object[]{"Token", "Cantidad", "Tipo"});

        StringTokenizer st = new StringTokenizer(txtcod.getText(), "{}();,\"=+-*/><||&&# \n\t", true);
        String token, text = "";
        while (st.hasMoreTokens()) {
            token = st.nextToken();
            if (!" ".equals(token) && !"\n".equals(token) && !"\t".equals(token)) {
                if (reservadas.containsKey(token)) {
                    reservadas.put(token, reservadas.get(token) + 1);
                } else {
                    if (operadores.containsKey(token)) {
                        operadores.put(token, operadores.get(token) + 1);
                    } else {
                        if (delimitadores.containsKey(token)) {
                            delimitadores.put(token, delimitadores.get(token) + 1);
                            if ("#".equals(token)) {
                                token = st.nextToken();
                                while (st.hasMoreTokens() && !"#".equals(token)) {
                                    text += token;
                                    token = st.nextToken();
                                }
                                alfabeto.add(text);
                                delimitadores.put(token, delimitadores.get(token) + 1);
                                text = "";
                            }
                        } else {
                            if (id.containsKey(token)) {
                                id.put(token, id.get(token) + 1);
                            } else {
                                if (token.matches("([0-9]*)|([0-9]*.[0-9]+)")) {
                                    if (digitos.containsKey(token)) {
                                        digitos.put(token, digitos.get(token) + 1);
                                    } else {
                                        digitos.put(token, 1);
                                    }
                                } else {
                                    id.put(token, 1);
                                }
                            }
                        }
                    }
                }
            }
        }

        Iterator<String> lexemas = reservadas.keySet().iterator();
        while (lexemas.hasNext()) {
            token = lexemas.next();
            if (reservadas.get(token) > 0) {
                model.addRow(new Object[]{token, reservadas.get(token), "Palabra Reservada"});
            }
        }
        lexemas = operadores.keySet().iterator();
        while (lexemas.hasNext()) {
            token = lexemas.next();
            if (operadores.get(token) > 0) {
                model.addRow(new Object[]{token, operadores.get(token), "Operador"});
            }
        }
        lexemas = delimitadores.keySet().iterator();
        while (lexemas.hasNext()) {
            token = lexemas.next();
            if (delimitadores.get(token) > 0) {
                model.addRow(new Object[]{token, delimitadores.get(token), "Delimitador"});
            }
        }
        lexemas = id.keySet().iterator();
        while (lexemas.hasNext()) {
            token = lexemas.next();
            if (id.get(token) > 0) {
                model.addRow(new Object[]{token, id.get(token), "Identificador"});
            }
        }
        lexemas = digitos.keySet().iterator();
        while (lexemas.hasNext()) {
            token = lexemas.next();
            if (digitos.get(token) > 0) {
                if (token.matches("[0-9]+")) {
                    model.addRow(new Object[]{token, digitos.get(token), "N√∫mero"});
                }
                if (token.matches("[0-9]+.[0-9]+")) {
                    model.addRow(new Object[]{token, digitos.get(token), "N√∫mero Decimal"});
                }
            }
        }
        lexemas = alfabeto.iterator();
        while (lexemas.hasNext()) {
            model.addRow(new Object[]{lexemas.next(), "1", "Texto"});

        }

        tabla.setModel(model);
    }//GEN-LAST:event_MostrarTipoCarActionPerformed


    private void compilarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_compilarActionPerformed


    }//GEN-LAST:event_compilarActionPerformed

    private void limpiarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_limpiarActionPerformed

    }//GEN-LAST:event_limpiarActionPerformed

    private void EjecActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_EjecActionPerformed

    }//GEN-LAST:event_EjecActionPerformed

    private void limActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_limActionPerformed
        txtcod.setText("");
        LineaError.setText("");
        Error.setText("");
        txtATraducido.setText("");
        Ejec.setEnabled(false);
    }//GEN-LAST:event_limActionPerformed

    private void EjecutaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_EjecutaActionPerformed
        txtATraducido.setText("");
        String simbolo = "([=<>])",
                id = "([(a-z)(A-Z)](\\w)*)",
                num = "((\\d)+)",
                dec = "((\\d)+(\\.)(\\d)+)",
                cadena_sint = "((((#)[.\\W\\w\\s]*(#))|(" + id + "))((\\s)*(\\+)((\\s)*((#)[.\\W\\w\\s]*(#))|(" + id + ")))*)",
                mostrar_sint = "((\\s)*mostrar(\\s)*(\\()(\\s)*((((#)[.\\W\\w\\s]*(#))|(" + id + "))((\\s)*(\\+)((\\s)*((#)[.\\W\\w\\s]*(#))|(" + id + ")))*)(\\s)*(\\))(\\s)*(;))",
                take = "((\\s)*leer(\\s)*(\\()(\\s)*((((#)[.\\W\\w\\s]*(#))|(" + id + "))((\\s)*(\\+)((\\s)*((#)[.\\W\\w\\s]*(#))|(" + id + ")))*)(\\s)*(\\))(\\s)*(;))",
                operaciones = "((" + id + "|" + num + "|" + dec + ")(\\s)*([+-/*](\\s)*(" + id + "|" + num + "|" + dec + "))+)",
                defVal = "((\\s)*" + id + "(\\s)*=(\\s)*(" + id + "|" + cadena_sint + "|" + operaciones + "|" + num + "|" + dec + ")(\\s)*(;))",
                defValVar = "((\\s)*" + id + "(\\s)*=(\\s)*(" + id + "|" + cadena_sint + "|" + operaciones + "|" + num + "|" + dec + ")(\\s)*)",
                condicion = id + "(\\s)*" + simbolo + "(\\s)*(" + id + "|" + num + "|" + dec + ")((\\s)*([(&&)(||)](\\s)*" + id + "(\\s)*" + simbolo + "(\\s)*(" + id + "|" + num + "|" + dec + ")))*",
                var = "((\\s)*((entero)|(decimal)|(cadena))(\\b)(\\s)*(" + id + "|" + defValVar + ")((\\s)*(,(\\s)*(" + id + "|" + defValVar + ")))*(\\s)*(;))",
                principal = "((\\s)*" + id + "txtATraducidocomienzo(\\s)*(\\{)[.\\W\\w\\s]*(fin(\\s)*(\\})(\\s)*)$)",
                principal2 = "((\\s)*" + id + "(\\b)(\\s)*comienzo(\\s)*(\\{))",
                principal3 = "((\\s)*fin(\\s)*(\\})(\\s)*)",
                cicl_para2 = "((\\s)*para(\\b)(\\s)*(" + id + "|" + num + ")(\\b)(\\s)*(=)*(" + id + "|" + num + ")(\\b)(\\s)*(con_paso)(\\b)(\\s)*" + num + "(\\s)*[+-]?(\\s)*(\\b)(hasta)(\\b)(\\s)*(" + id + "|" + num + ")(\\s)*(\\{))",
                para_sint = "((\\s)*FOR(\\b)(\\s)*(" + id + "|" + num + ")(\\b)(\\s)*(hasta)(\\b)(\\s)*(" + id + "|" + num + ")(\\s)*)",
                cicl_para3 = "((\\s)*finpara(\\s)*(\\}))",
                cicl_mien2 = "((\\s)*mientras(\\s)*(\\()(\\s)*" + condicion + "(\\s)*(\\))(\\s)*(\\{))",
                cicl_mien3 = "((\\s)*finmientras(\\s)*(\\}))",
                it2 = "((\\s)*si(\\s)*(\\()(\\s)*" + condicion + "(\\s)*(\\))(\\s)*(\\{))",
                it3 = "((\\s)*finsi(\\s)*(\\}))",
                entero = "[0-9]*",
                parae = "(con_paso)(\\b)(\\s)*" + num + "(\\s)*[+-]?(\\s)*(\\b)",
                to = "hasta(\\b)(\\s)*(" + id + "|" + num + ")(\\s)*(\\{)",
                decimal = "[0-9]*.[0-9]+";

        StringTokenizer st = new StringTokenizer(txtcod.getText(), "\n");
        String token;
        while (st.hasMoreTokens()) {
            //JOptionPane.showMessageDialog(this,"Identificando Variables...");
            token = st.nextToken();

            if (token.matches(principal2)) {

                String tokinn = "'";
                StringTokenizer tokin = new StringTokenizer(token, " \n");
                while (tokin.hasMoreTokens()) {
                    String testo = "";
                    testo = testo + txtATraducido.getText();
                    tokinn = tokin.nextToken();
                    if (tokinn.contains("comienzo")) {
                        txtATraducido.setText(testo + " ");

                    }
                    if (tokinn.matches(id) && tokinn.contains("comienzo") == false && tokinn.contains("{") == false) {
                        txtATraducido.setText("Iniciando ejecucion;\n...\n " + "");
                    }
                    if (tokinn.contains("{")) {
                        txtATraducido.setText(testo + " ;\n");
                    }
                }

            }

        }

        StringTokenizer st1 = new StringTokenizer(txtcod.getText(), "\n");
        String token1;
        while (st1.hasMoreTokens()) {

            token1 = st1.nextToken();

            if (token1.matches(mostrar_sint)) {
                StringTokenizer st2 = new StringTokenizer(token1, "()");
                while (st2.hasMoreTokens()) {
                    String tuken = st2.nextToken();
                    if (tuken.contains("mostrar")) {

                        String a = txtATraducido.getText() + "\n  ";
                        a = a.replace('#', '"');

                        txtATraducido.setText(a);
                    }
                    if (tuken.contains("+")) {
                        String tokesito;
                        StringTokenizer tuk = new StringTokenizer(tuken, "+");
                        while (tuk.hasMoreTokens()) {
                            tokesito = tuk.nextToken();
                            if (tuk.hasMoreTokens()) {
                                String a = txtATraducido.getText() + tokesito + ",";
                                a = a.replace('#', '"');
                                txtATraducido.setText(a);
                            } else {
                                String a = txtATraducido.getText() + tokesito;
                                a = a.replace('#', '"');
                                txtATraducido.setText(a);
                            }
                        }
                    }

                    if (tuken.contains(";")) {
                        String a = txtATraducido.getText() + " \n";
                        a = a.replace('#', '"');
                        txtATraducido.setText(a);
                    }
                    if (tuken.contains("mostrar") == false && tuken.contains("+") == false && tuken.contains(";") == false) {
                        String a = txtATraducido.getText() + tuken;
                        a = a.replace('#', '"');
                        txtATraducido.setText(a);
                    }
                }
            }

            if (token1.matches(defVal)) {

                JOptionPane.showMessageDialog(this, "Se encontr√≥ una operaci√≥n");
            }

            if (token1.matches(cicl_para2)) {
                JOptionPane.showMessageDialog(this, "Se encontr√≥ un ciclo for");

            }
            if (token1.matches(mostrar_sint)) {
                JOptionPane.showMessageDialog(this, "Se encontr√≥ un mensaje");

            }
            if (token1.matches(it2)) {
                JOptionPane.showMessageDialog(this, "Se encontr√≥ un condicional si");

            }
            if (token1.matches(cicl_mien2)) {
                JOptionPane.showMessageDialog(this, "Se encontr√≥ un ciclo cuando");

            }
            if (token1.matches(take)) {
                JOptionPane.showMessageDialog(this, "Se encontr√≥ una lectura de variable");

            }

        }
    }//GEN-LAST:event_EjecutaActionPerformed

    private void CompiActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_CompiActionPerformed

        errores = 0;
        LinkedList<String> ENT = new LinkedList<>();
        LinkedList<String> DEC = new LinkedList<>();
        LinkedList<String> TEXT = new LinkedList<>();
        LinkedList<String> leer = new LinkedList<>();

        String simbolo = "([=<>])", //SINTAXIS EXP REGULARES
                id = "([(a-z)(A-Z)](\\w)*)",
                num = "((\\d)+)",
                dec = "((\\d)+(\\.)(\\d)+)",
                cadena_sint = "((((#)[.\\W\\w\\s]*(#))|(" + id + "))((\\s)*(\\+)((\\s)*((#)[.\\W\\w\\s]*(#))|(" + id + ")))*)",
                mostrar_sint = "((\\s)*mostrar(\\s)*(\\()(\\s)*((((#)[.\\W\\w\\s]*(#))|(" + id + "))((\\s)*(\\+)((\\s)*((#)[.\\W\\w\\s]*(#))|(" + id + ")))*)(\\s)*(\\))(\\s)*(;))",
                leer_sint = "((\\s)*leer(\\s)*(\\()(\\s)*((((#)[.\\W\\w\\s]*(#))|(" + id + "))((\\s)*(\\+)((\\s)*((#)[.\\W\\w\\s]*(#))|(" + id + ")))*)(\\s)*(\\))(\\s)*(;))",
                operaciones = "((" + id + "|" + num + "|" + dec + ")(\\s)*([+-/*](\\s)*(" + id + "|" + num + "|" + dec + "))+)",
                defVal = "((\\s)*" + id + "(\\s)*=(\\s)*(" + id + "|" + cadena_sint + "|" + operaciones + "|" + num + "|" + dec + ")(\\s)*(;))",
                defValVar = "((\\s)*" + id + "(\\s)*=(\\s)*(" + id + "|" + cadena_sint + "|" + operaciones + "|" + num + "|" + dec + ")(\\s)*)",
                condicion = id + "(\\s)*" + simbolo + "(\\s)*(" + id + "|" + num + "|" + dec + ")((\\s)*([(&&)(||)](\\s)*" + id + "(\\s)*" + simbolo + "(\\s)*(" + id + "|" + num + "|" + dec + ")))*",
                var = "((\\s)*((entero)|(decimal)|(cadena))(\\b)(\\s)*(" + id + "|" + defValVar + ")((\\s)*(,(\\s)*(" + id + "|" + defValVar + ")))*(\\s)*(;))",
                principal = "((\\s)*" + id + "(\\b)(\\s)*comienzo(\\s)*(\\{)[.\\W\\w\\s]*(fin(\\s)*(\\})(\\s)*)$)",
                principal2 = "((\\s)*" + id + "(\\b)(\\s)*comienzo(\\s)*(\\{))",
                principal3 = "((\\s)*fin(\\s)*(\\})(\\s)*)",
                cicl_para2 = "((\\s)*para(\\b)(\\s)*(" + id + "|" + num + ")(\\b)(\\s)*(=)*(" + id + "|" + num + ")(\\b)(\\s)*(con_paso)(\\b)(\\s)*" + num + "(\\s)*[+-]?(\\s)*(\\b)(hasta)(\\b)(\\s)*(" + id + "|" + num + ")(\\s)*(\\{))",
                cicl_para3 = "((\\s)*finpara(\\s)*(\\}))",
                cicl_mien2 = "((\\s)*mientras(\\s)*(\\()(\\s)*" + condicion + "(\\s)*(\\))(\\s)*(\\{))",
                cicl_mien3 = "((\\s)*finmientras(\\s)*(\\}))",
                it2 = "((\\s)*si(\\s)*(\\()(\\s)*" + condicion + "(\\s)*(\\))(\\s)*(\\{))",
                it3 = "((\\s)*finsi(\\s)*(\\}))",
                entero = "[0-9]*",
                decimal = "[0-9]*.[0-9]+";

        LinkedList<Integer> error = new LinkedList<>();
        StringTokenizer st = new StringTokenizer(txtcod.getText(), ";{}", true);
        String token = "", txt = "", e;
        int i = 1, mainE = 0, start = 0, when = 0, it = 0, eB = 0;
        Error.setText("");

        if (txtcod.getText().matches(principal)) {

            while (st.hasMoreTokens()) {
                token = st.nextToken();
                if (st.hasMoreTokens()) {
                    token = token + st.nextToken();
                }
                if (token.matches("[.\\W\\w\\s]*(\\})") && st.countTokens() == 1) {
                    String auxTok = st.nextToken();
                    token = token + (auxTok.substring(0, auxTok.indexOf("\n")));
                }
                StringTokenizer lin = new StringTokenizer(token, "\n", true);
                while (lin.hasMoreTokens()) {
                    e = lin.nextToken();
                    if ("\n".equals(e)) {
                        i++;
                    }
                }

                if (token.matches(cicl_para2)) {
                    start++;
                }
                if (token.matches(cicl_para3)) {
                    start--;
                }
                if (token.matches(cicl_mien2)) {
                    when++;
                }
                if (token.matches(cicl_mien3)) {
                    when--;
                }
                if (token.matches(it2)) {
                    it++;
                }
                if (token.matches(it3)) {
                    it--;
                }
                if ((st.hasMoreTokens() == false && (start > 0 || when > 0 || it > 0)) || (start < 0 || when < 0 || it < 0)) {
                    eB = 1;
                }

                if ((token.matches(mostrar_sint) || token.matches(leer_sint) || token.matches(var) || token.matches(defVal) || token.matches(principal2) || token.matches(principal3) || token.matches("(\\s)*(\\$)") || token.matches(cicl_para2) || token.matches(cicl_para3) || token.matches(cicl_mien2) || token.matches(cicl_mien3) || token.matches(it2) || token.matches(it3)) && eB == 0) {
                    if (token.matches(leer_sint)) {

                    }
                    if (token.matches(var)) {
                        StringTokenizer stTipo = new StringTokenizer(token, " ,;");
                        String tipo = stTipo.nextToken();

                        if (tipo.contains("entero")) {

                            while (stTipo.hasMoreTokens()) {
                                tipo = stTipo.nextToken();

                                if (ENT.contains(tipo) || DEC.contains(tipo) || TEXT.contains(tipo) || leer.contains(tipo)) {
                                    Error.setText("La Variable esta repetida (" + tipo + ") " + i + ": \n"
                                            + "________________________________________________________________________\n" + token);
                                    Error.setForeground(new Color(235, 114, 7));

                                    for (int j = 1; j < i; j++) {
                                        txt += "\n";
                                    }
                                    LineaError.setText(txt + " ¬°!");
                                    errores = 1;
                                    break;
                                }

                                ENT.add(tipo);
                            }
                        }
                        if (tipo.contains("decimal")) {

                            while (stTipo.hasMoreTokens()) {
                                tipo = stTipo.nextToken();

                                if (ENT.contains(tipo) || DEC.contains(tipo) || TEXT.contains(tipo) || leer.contains(tipo)) {
                                    Error.setText("La Variable esta repetida (" + tipo + ") " + i + ": \n"
                                            + "________________________________________________________________________\n" + token);
                                    Error.setForeground(new Color(235, 114, 7));
                                    for (int j = 1; j < i; j++) {
                                        txt += "\n";
                                    }
                                    LineaError.setText(txt + " ¬°!");
                                    errores = 1;
                                    break;
                                }

                                DEC.add(tipo);
                            }
                        }
                        if (tipo.contains("leer")) {

                            while (stTipo.hasMoreTokens()) {
                                tipo = stTipo.nextToken();

                                if (ENT.contains(tipo) || DEC.contains(tipo) || TEXT.contains(tipo) || leer.contains(tipo)) {
                                    Error.setText("La Variable esta repetida (" + tipo + ") " + i + ": \n"
                                            + "________________________________________________________________________\n" + token);
                                    Error.setForeground(new Color(235, 114, 7));
                                    for (int j = 1; j < i; j++) {
                                        txt += "\n";
                                    }
                                    LineaError.setText(txt + " ¬°!");
                                    errores = 1;
                                    break;
                                }

                                leer.add(tipo);
                            }
                        }
                        if (tipo.contains("cadena")) {

                            while (stTipo.hasMoreTokens()) {
                                tipo = stTipo.nextToken();

                                if (ENT.contains(tipo) || DEC.contains(tipo) || TEXT.contains(tipo) || leer.contains(tipo)) {
                                    Error.setText("La variable esta repetida (" + tipo + ") " + i + ": \n"
                                            + "________________________________________________________________________\n" + token);
                                    Error.setForeground(new Color(235, 114, 7));
                                    for (int j = 1; j < i; j++) {
                                        txt += "\n";
                                    }
                                    LineaError.setText(txt + " ¬°!");
                                    errores = 1;
                                    break;
                                }

                                TEXT.add(tipo);
                            }
                        }
                    }
                    if (token.matches(defVal)) {
                        StringTokenizer stComprobar = new StringTokenizer(token, " \n\t=;");
                        String ID = stComprobar.nextToken(), comprobar = "", tok = "";
                        while (stComprobar.hasMoreTokens()) {
                            comprobar += stComprobar.nextToken();
                        }

                        if (ENT.contains(ID)) {
                            StringTokenizer stComprobarE = new StringTokenizer(comprobar, "+*/-");
                            while (stComprobarE.hasMoreTokens()) {
                                tok = stComprobarE.nextToken();

                                if (tok.matches(id)) {
                                    if (ENT.contains(tok)); else {
                                        Error.setText("ERROR SEM√ÅNTICO (" + tok + ") " + i + ": \n"
                                                + "________________________________________________________________________\n" + token);
                                        Error.setForeground(new Color(235, 114, 7));
                                        for (int j = 1; j < i; j++) {
                                            txt += "\n";
                                        }
                                        LineaError.setText(txt + " ¬°!");
                                        errores = 1;
                                        break;
                                    }
                                } else {
                                    if (tok.matches(entero)); else {
                                        Error.setText("ERROR SEM√ÅNTICO (" + tok + ") " + i + ": \n"
                                                + "________________________________________________________________________\n" + token);
                                        Error.setForeground(new Color(235, 114, 7));
                                        for (int j = 1; j < i; j++) {
                                            txt += "\n";
                                        }
                                        LineaError.setText(txt + " ¬°!");
                                        errores = 1;
                                        break;
                                    }
                                }
                            }
                        } else {
                            if (DEC.contains(ID)) {
                                StringTokenizer stComprobarD = new StringTokenizer(comprobar, "+*/-");
                                while (stComprobarD.hasMoreTokens()) {
                                    tok = stComprobarD.nextToken();

                                    if (tok.matches(id)) {
                                        if (DEC.contains(tok)); else {
                                            Error.setText("ERROR SEM√ÅNTICO (" + tok + ") " + i + ": \n"
                                                    + "________________________________________________________________________\n" + token);
                                            Error.setForeground(new Color(235, 114, 7));
                                            for (int j = 1; j < i; j++) {
                                                txt += "\n";
                                            }
                                            LineaError.setText(txt + " ¬°!");
                                            errores = 1;
                                            break;
                                        }
                                    } else {
                                        if (tok.matches(decimal)); else {
                                            Error.setText("ERROR SEM√ÅNTICO (" + tok + ") " + i + ": \n"
                                                    + "________________________________________________________________________\n" + token);
                                            Error.setForeground(new Color(235, 114, 7));
                                            for (int j = 1; j < i; j++) {
                                                txt += "\n";
                                            }
                                            LineaError.setText(txt + " ¬°!");
                                            errores = 1;
                                            break;
                                        }
                                    }
                                }
                            } else {
                                if (TEXT.contains(ID)) {
                                    if (comprobar.matches("((((\")[.\\W\\w\\s]*(\"))|(" + id + "))((\\s)*(\\+)((\\s)*((\")[.\\W\\w\\s]*(\"))|(" + id + ")))*)")); else {
                                        Error.setText("ERROR SEM√ÅNTICO " + i + ": \n"
                                                + "________________________________________________________________________\n" + token);
                                        Error.setForeground(new Color(235, 114, 7));
                                        for (int j = 1; j < i; j++) {
                                            txt += "\n";
                                        }
                                        LineaError.setText(txt + " ¬°!");
                                        errores = 1;
                                        break;

                                    }

                                } else {
                                    Error.setText("Variable no declarada " + i + ": \n"
                                            + "________________________________________________________________________\n" + token);
                                    Error.setForeground(new Color(235, 114, 7));
                                    for (int j = 1; j < i; j++) {
                                        txt += "\n";
                                    }
                                    LineaError.setText(txt + " ¬°!");
                                    errores = 1;
                                    break;
                                }
                            }
                        }
                    }
                } else {

                    if (token.contains("mostrar")) {
                        txtATraducido.setText("");
                        Error.setText("Error al declarar sentencia mostrar en la linea " + i + ": \n"
                                + "\n" + token);
                        Error.setForeground(new Color(235, 7, 73));
                        errores = 1;
                        for (int j = 1; j < i; j++) {
                            txt += "\n";
                        }
                        LineaError.setText(txt + " ¬°!");
                        errores = 1;
                        break;
                    }
                    if (token.contains("entero") || token.contains("decimal") || token.contains("cadena")) {
                        Error.setText("Error en declaracion de variables en la linea " + i + ": \n"
                                + "\n" + token);
                        Error.setForeground(new Color(235, 7, 73));
                        for (int j = 1; j < i; j++) {
                            txt += "\n";
                        }
                        LineaError.setText(txt + " ¬°!");
                        errores = 1;
                        break;
                    }
                    if (token.contains("leer")) {
                        Error.setText("Error en lectura de valor leer en la linea " + i + ": \n"
                                + "\n" + token);
                        Error.setForeground(new Color(235, 7, 73));
                        for (int j = 1; j < i; j++) {
                            txt += "\n";
                        }
                        LineaError.setText(txt + " ¬°!");
                        errores = 1;
                        break;
                    }
                    if (token.contains("finpara}")) {

                        Error.setText("Cierre de Ciclo para incorrecto  en la linea " + i + ": \n"
                                + "\n" + token);
                        Error.setForeground(new Color(235, 7, 73));
                        for (int j = 1; j < i; j++) {
                            txt += "\n";
                        }
                        LineaError.setText(txt + " ¬°!");
                        errores = 1;
                        break;
                    }
                    if (token.contains("para")) {

                        Error.setText("Inicio de Ciclo para incorrecto  en la linea " + i + ": \n"
                                + "\n" + token);
                        Error.setForeground(new Color(235, 7, 73));
                        for (int j = 1; j < i; j++) {
                            txt += "\n";
                        }
                        LineaError.setText(txt + " ¬°!");
                        errores = 1;
                        break;
                    }
                    if (token.contains("finmientras")) {
                        Error.setText("Cierre de ciclo mientras incorrecto en la linea " + i + ": \n"
                                + "\n" + token);
                        Error.setForeground(new Color(235, 7, 73));
                        for (int j = 1; j < i; j++) {
                            txt += "\n";
                        }
                        LineaError.setText(txt + " ¬°!");
                        break;
                    }
                    if (token.contains("mientras")) {
                        Error.setText("Inicio de ciclo mientras incorrecto en la linea " + i + ": \n"
                                + "\n" + token);
                        Error.setForeground(new Color(235, 7, 73));
                        for (int j = 1; j < i; j++) {
                            txt += "\n";
                        }
                        LineaError.setText(txt + " ¬°!");
                        errores = 1;
                        break;
                    }
                    if (token.contains("finsi")) {

                        Error.setText("Cierre de condicion si incorrecto en la linea " + i + ": \n"
                                + "\n" + token);
                        Error.setForeground(new Color(235, 7, 73));
                        for (int j = 1; j < i; j++) {
                            txt += "\n";
                        }
                        LineaError.setText(txt + " ¬°!");
                        errores = 1;
                        break;
                    }
                    if (token.contains("si")) {

                        Error.setText("Inicio de si incorrecto en la linea " + i + ": \n"
                                + "\n" + token);
                        Error.setForeground(new Color(235, 7, 73));
                        for (int j = 1; j < i; j++) {
                            txt += "\n";
                        }
                        LineaError.setText(txt + " ¬°!");
                        errores = 1;
                        break;
                    } else {
                        Error.setText("Sintaxis Erronea en la linea " + i + ": \n"
                                + "\n" + token);
                        Error.setForeground(new Color(235, 7, 73));
                        for (int j = 1; j < i; j++) {
                            txt += "\n";
                        }
                        LineaError.setText(txt + " ¬°!");
                        errores = 1;
                        break;
                    }
                }

            }

        } else {
            st = new StringTokenizer(txtcod.getText(), ";{}", true);
            while (st.hasMoreTokens()) {
                token = st.nextToken();
                if (st.hasMoreTokens()) {
                    token = token + st.nextToken();
                }
                if (token.matches("[.\\W\\w\\s]*(\\})") && st.countTokens() == 1) {
                    String auxTok = st.nextToken();
                    token = token + (auxTok.substring(0, auxTok.indexOf("\n")));
                }
                StringTokenizer lin = new StringTokenizer(token, "\n", true);
                while (lin.hasMoreTokens()) {
                    e = lin.nextToken();
                    if ("\n".equals(e)) {
                        i++;
                    }
                }
                if (eB == 1) {
                    break;
                }
                if (token.matches(cicl_para2)) {
                    start++;
                }
                if (token.matches(cicl_para3)) {
                    start--;
                }
                if (token.matches(cicl_mien2)) {
                    when++;
                }
                if (token.matches(cicl_mien3)) {
                    when--;
                }
                if (token.matches(it2)) {
                    it++;
                }
                if (token.matches(it3)) {
                    it--;
                }
                if ((st.hasMoreTokens() == false && (start > 0 || when > 0 || it > 0)) || (start < 0 || when < 0 || it < 0)) {
                    eB = 1;
                }

                if ((token.matches(mostrar_sint) || token.matches(leer_sint) || token.matches(var) || token.matches(defVal) || token.matches(principal2) || token.matches(principal3) || token.matches("(\\s)*(\\$)") || token.matches(cicl_para2) || token.matches(cicl_para3) || token.matches(cicl_mien2) || token.matches(cicl_mien3) || token.matches(it2) || token.matches(it3)) && eB == 0) {
                    Error.setText("Compilacion exitosa");
                    if (token.matches(principal3)) {
                        eB = 1;
                    }
                } else {
                    if (token.contains("mostrar")) {
                        Error.setText("Error al declarar sentencia mostrar  en la linea " + i + ": \n"
                                + "\n" + token);
                        Error.setForeground(new Color(235, 7, 73));
                        for (int j = 1; j < i; j++) {
                            txt += "\n";
                        }
                        LineaError.setText(txt + " ¬°!");
                        errores = 1;
                        break;
                    }
                    if (token.contains("entero") || token.contains("decimal") || token.contains("cadena")) {
                        Error.setText("Error en declaracion de tipos de variables en la linea " + i + ": \n"
                                + "\n" + token);
                        Error.setForeground(new Color(235, 7, 73));
                        for (int j = 1; j < i; j++) {
                            txt += "\n";
                        }
                        LineaError.setText(txt + " ¬°!");
                        errores = 1;
                        break;
                    }
                    if (token.contains("leer")) {
                        Error.setText("Error en lectura de valor leer en la linea " + i + ": \n"
                                + "\n" + token);
                        Error.setForeground(new Color(235, 7, 73));
                        for (int j = 1; j < i; j++) {
                            txt += "\n";
                        }
                        LineaError.setText(txt + " ¬°!");
                        errores = 1;
                        break;
                    }
                    if (token.contains("finpara}")) {
                        Error.setText("Problema de cierre de ciclo para incorrecto en la linea " + i + ": \n"
                                + "\n" + token);
                        Error.setForeground(new Color(235, 7, 73));
                        for (int j = 1; j < i; j++) {
                            txt += "\n";
                        }
                        LineaError.setText(txt + " ¬°!");
                        errores = 1;
                        break;
                    }
                    if (token.contains("para")) {
                        Error.setText("problema en el inicio del ciclo para en la linea " + i + ": \n"
                                + "\n" + token);
                        Error.setForeground(new Color(235, 7, 73));
                        for (int j = 1; j < i; j++) {
                            txt += "\n";
                        }
                        LineaError.setText(txt + " ¬°!");
                        errores = 1;
                        break;
                    }
                    if (token.contains("finmientras")) {
                        Error.setText("Problema de cierre de ciclo mientras en la linea " + i + ": \n"
                                + "\n" + token);
                        Error.setForeground(new Color(235, 7, 73));
                        for (int j = 1; j < i; j++) {
                            txt += "\n";
                        }
                        LineaError.setText(txt + " ¬°!");
                        errores = 1;
                        break;
                    }
                    if (token.contains("mientras")) {
                        Error.setText("Problema en el inicio del ciclo mientras en la linea " + i + ": \n"
                                + "\n" + token);
                        Error.setForeground(new Color(235, 7, 73));
                        for (int j = 1; j < i; j++) {
                            txt += "\n";
                        }
                        LineaError.setText(txt + " ¬°!");
                        errores = 1;
                        break;
                    }
                    if (token.contains("finsi")) {
                        Error.setText("Problema de cierre de la condicion si en la linea " + i + ": \n"
                                + "\n" + token);
                        Error.setForeground(new Color(235, 7, 73));
                        for (int j = 1; j < i; j++) {
                            txt += "\n";
                        }
                        LineaError.setText(txt + " ¬°!");
                        errores = 1;
                        break;
                    }
                    if (token.contains("si")) {
                        Error.setText("Problema en el inicio del condicional si en la linea " + i + ": \n"
                                + "\n" + token);
                        Error.setForeground(new Color(235, 7, 73));
                        for (int j = 1; j < i; j++) {
                            txt += "\n";
                        }
                        LineaError.setText(txt + " ¬°!");
                        errores = 1;
                        break;
                    } else {
                        Error.setText("Sintaxis Erronea en la linea " + i + ": \n"
                                + "\n" + token);
                        Error.setForeground(new Color(235, 7, 73));
                        for (int j = 1; j < i; j++) {
                            txt += "\n";
                        }
                        LineaError.setText(txt + " ¬°!");
                        errores = 1;
                        break;
                    }
                }
            }
            if (mainE == 0) {
                Error.setText("Cierre de la funcion principal incorrecto en la linea " + i + ": \n"
                        + "\n" + token);
                for (int j = 1; j < 1; j++) {
                    txt += "\n";
                }
                Error.setForeground(new Color(235, 7, 45));
                LineaError.setText(txt + " ¬°!");
                errores = 1;
            }
        }
        if (errores == 1) {
            Ejec.setEnabled(false);

        } else {

            Ejec.setEnabled(true);
            Error.setText("Analisis sintactico exitoso, no se han encontrado errores");
            Error.setForeground(new Color(21, 7, 235));
        }
    }//GEN-LAST:event_CompiActionPerformed

    private void acercaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_acercaActionPerformed
        Informacion inf = new Informacion();
        inf.show();
    }//GEN-LAST:event_acercaActionPerformed

    private void guardarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_guardarActionPerformed
        Guardar();
    }//GEN-LAST:event_guardarActionPerformed

    private void instructivoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_instructivoActionPerformed
        Visual in = new Visual();
        in.show();
    }//GEN-LAST:event_instructivoActionPerformed

    private void EjemploActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_EjemploActionPerformed
        Visual_Ejemplos vis = new Visual_Ejemplos();
        vis.show();
    }//GEN-LAST:event_EjemploActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Ventana.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Ventana.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Ventana.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Ventana.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Ventana().setVisible(true);
            }
        });
    }

    public void Guardar() {
        try {
            j = new JFileChooser();

            j.setFileSelectionMode(JFileChooser.FILES_ONLY);
            FileNameExtensionFilter filtroTxt = new FileNameExtensionFilter("Documento de Texto", "txt");
            j.setFileFilter(filtroTxt);
            j.setFileHidingEnabled(false);
            int fin = this.getTitle().lastIndexOf('.');
            if (fin == -1) {
                fin = this.getTitle().length();
            }
            j.setSelectedFile(new File(this.getTitle().substring(0, fin)));

            int select = j.showSaveDialog(this);
            File guarda = j.getSelectedFile();

            if (select == JFileChooser.APPROVE_OPTION) {
                if (guarda != null) {
                    FileWriter save = new FileWriter(guarda + ".txt");
                    save.write(txtcod.getText());
                    save.close();
                    JOptionPane.showMessageDialog(null, "Se ha guardado el archivo", "Informaci√≥n", JOptionPane.INFORMATION_MESSAGE);
                }
            }
        } catch (IOException ex) {
            JOptionPane.showMessageDialog(null, "Su archivo no se ha guardado", "Advertencia", JOptionPane.WARNING_MESSAGE);
        }
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JMenuItem Compi;
    private javax.swing.JMenu Ejec;
    private javax.swing.JMenuItem Ejecuta;
    private javax.swing.JMenuItem Ejemplo;
    private javax.swing.JEditorPane Error;
    private javax.swing.JEditorPane LineaError;
    private javax.swing.JMenuItem MostrarTipoCar;
    private javax.swing.JMenuItem acerca;
    private javax.swing.JMenu compilar;
    private javax.swing.JMenuItem guardar;
    private javax.swing.JMenuItem instructivo;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JMenu jMenu1;
    private javax.swing.JMenu jMenu2;
    private javax.swing.JMenu jMenu3;
    private javax.swing.JMenu jMenu6;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JMenuItem jMenuItem1;
    private javax.swing.JMenuItem jMenuItem7;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JScrollPane jScrollPane5;
    private javax.swing.JPopupMenu.Separator jSeparator1;
    private javax.swing.JPopupMenu.Separator jSeparator3;
    private javax.swing.JPopupMenu.Separator jSeparator7;
    private javax.swing.JMenuItem lim;
    private javax.swing.JMenu limpiar;
    private javax.swing.JPanel panel1;
    private javax.swing.JTable tabla;
    private javax.swing.JTextArea txtATraducido;
    private javax.swing.JTextArea txtcod;
    // End of variables declaration//GEN-END:variables
}
